using NUnit.Framework;\nusing Microsoft.Playwright;\nusing System;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing TestBase;\n\nnamespace ApiTests\n{\n    public class VerifyEndpointsTests : UiTestBase\n    {\n        [Test]\n        public async Task TestPostEndpoint()\n        {\n            // Arrange\n            var payload = new {\n                Name = \"Test Item \" + Guid.NewGuid(),\n                Description = \"Optional description\"\n            };\n            var options = new APIRequestContextOptions\n            {\n                Headers = new Dictionary<string, string>\n                {\n                    { \"Content-Type\", \"application/json\" }\n                },\n                Data = JsonSerializer.Serialize(payload, new JsonSerializerOptions\n                {\n                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase\n                })\n            };\n\n            // Act\n            var response = await API.PostAsync(\"/api/data\", options);\n            JsonElement responseBody = (JsonElement)await response.JsonAsync();\n\n            // Assert\n            Assert.IsTrue(responseBody.TryGetProperty(\"name\", out var nameProperty), \"Response does not contain 'name' property.\");\n            Assert.AreEqual(payload.Name, nameProperty.GetString(), \"The 'name' property does not match the payload.\");\n            Assert.IsTrue(responseBody.TryGetProperty(\"id\", out var idProperty), \"Response does not contain 'id' property.\");\n            Assert.Greater(idProperty.GetInt32(), 0, \"The 'id' property is not a positive integer.\");\n\n            // Log\n            TestContext.WriteLine(\"Request Payload: \" + JsonSerializer.Serialize(payload));\n            TestContext.WriteLine(\"Response: \" + responseBody.ToString());\n        }\n\n        [Test]\n        public async Task TestGetEndpoint()\n        {\n            // Act\n            var response = await API.GetAsync(\"/api/data\");\n            var responseBody = await response.JsonAsync();\n\n            // Assert\n            Assert.IsTrue(responseBody.ValueKind == JsonValueKind.Array, \"Response is not an array.\");\n            Assert.IsTrue(responseBody.GetArrayLength() > 0, \"Response array is empty.\");\n        }\n    }\n}