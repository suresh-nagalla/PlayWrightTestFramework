using NUnit.Framework;\nusing Microsoft.Playwright;\nusing System;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing TestBase;\n\nnamespace ApiTests\n{\n    public class ApiTests : UiTestBase\n    {\n        [Test]\n        public async Task PostDataTest()\n        {\n            // Arrange\n            var payload = new { Name = \"Test Item \" + Guid.NewGuid(), Description = \"Optional description\" };\n            var options = new APIRequestContextOptions\n            {\n                Headers = new Dictionary<string, string> { { \"Content-Type\", \"application/json\" } },\n                Data = JsonSerializer.Serialize(payload, new JsonSerializerOptions { PropertyNamingPolicy = JsonNamingPolicy.CamelCase })\n            };\n\n            // Act\n            var response = await API.PostAsync(\"/api/data\", options);\n            JsonElement responseBody = (JsonElement)await response.JsonAsync();\n\n            // Assert\n            Assert.IsTrue(responseBody.TryGetProperty(\"id\", out var idProperty), \"Response does not contain 'id'\");\n            Assert.IsTrue(responseBody.TryGetProperty(\"name\", out var nameProperty), \"Response does not contain 'name'\");\n            Assert.AreEqual(payload.Name, nameProperty.GetString(), \"Names do not match\");\n\n            // Log\n            TestContext.WriteLine($\"Request: {JsonSerializer.Serialize(payload)}\");\n            TestContext.WriteLine($\"Response: {responseBody}\");\n        }\n\n        [Test]\n        public async Task GetDataTest()\n        {\n            // Act\n            var response = await API.GetAsync(\"/api/data\");\n            var responseBody = await response.JsonAsync();\n\n            // Assert\n            Assert.IsTrue(responseBody.ValueKind == JsonValueKind.Array, \"Response is not an array\");\n            Assert.IsTrue(responseBody.GetArrayLength() > 0, \"Response array is empty\");\n\n            // Log\n            TestContext.WriteLine($\"Response: {responseBody}\");\n        }\n    }\n}\n