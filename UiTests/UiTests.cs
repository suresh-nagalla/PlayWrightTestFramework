using NUnit.Framework;\nusing Microsoft.Playwright;\nusing System;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing TestBase;\nusing Models;\n\nnamespace UiTests\n{\n    public class UiTests : UiTestBase\n    {\n        [Test]\n        public async Task VerifyCreatedItemIsVisible()\n        {\n            // Arrange\n            var newItem = new DataItem\n            {\n                Name = \"Test Item \" + Guid.NewGuid(),\n                Description = \"Optional description\"\n            };\n            var options = new APIRequestContextOptions\n            {\n                Headers = new Dictionary<string, string> { { \"Content-Type\", \"application/json\" } },\n                Data = JsonSerializer.Serialize(newItem, new JsonSerializerOptions { PropertyNamingPolicy = JsonNamingPolicy.CamelCase })\n            };\n\n            // Act\n            var response = await API.PostAsync(\"/api/data\", options);\n            JsonElement responseBody = (JsonElement)await response.JsonAsync();\n            var id = responseBody.GetProperty(\"id\").GetInt32();\n\n            // Navigate to the UI page\n            await Page.GotoAsync(\"http://localhost:5000\");\n\n            // Assert\n            var itemSelector = $\"li[data-item-id='{id}']\";\n            var item = await Page.QuerySelectorAsync(itemSelector);\n            Assert.IsNotNull(item, \"Item not found in the UI\");\n            var itemName = await item.EvalOnSelectorAsync<string>(\"strong\", \"el => el.textContent\");\n            Assert.AreEqual(newItem.Name, itemName, \"Item name does not match\");\n\n            // Highlight the item\n            await Page.EvalOnSelectorAsync(itemSelector, \"el => el.style.border = '3px solid red'\");\n\n            // Capture screenshot\n            var screenshotPath = $\"screenshot_{Guid.NewGuid()}.png\";\n            await Page.ScreenshotAsync(new PageScreenshotOptions { Path = screenshotPath, FullPage = true });\